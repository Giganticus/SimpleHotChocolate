schema {
  query: Query
  mutation: Mutation
  subscription: Subscriptions
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type AddPersonPayload {
  person: Person
  errors: [String!]
}

type Company implements Node {
  id: ID!
  name: String! @lengthLimit(length: 10)
  employees: Int!
}

type CompanyPayload {
  company: Company
  errors: [String!]
}

"A connection to a list of items."
type CountriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CountriesEdge!]
  "A flattened list of the nodes."
  nodes: [Country!]
}

"An edge in a connection."
type CountriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Country!
}

type Country {
  id: Int!
  name: String!
  gdp: Decimal!
}

"A connection to a list of items."
type GetCompaniesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [GetCompaniesEdge!]
  "A flattened list of the nodes."
  nodes: [Company!]
}

"An edge in a connection."
type GetCompaniesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Company!
}

type Interest {
  id: Int!
  description: String!
}

"You can add notation to the schema using code"
type Mutation {
  addAPerson(input: AddPersonInput!): AddPersonPayload!
  addCompany(input: AddCompanyInput!): CompanyPayload!
  anotherHelloWorld(sayHelloTo: String!): String!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Person {
  interests: [Interest!]!
  "Id of person"
  id: UUID!
  name: String!
  age: Int!
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  helloWorld(sayHelloTo: String!): String!
  people: [Person!]!
  singlePersonByName(personName: String!): Person
  singlePersonByNameUsingDataLoader(personName: String!): Person!
  peopleByName(names: [String!]!): [Person!]!
  countries("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): CountriesConnection
  getCompanies("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CompanyFilterInput order: [CompanySortInput!]): GetCompaniesConnection
}

type Subscriptions {
  onCompanyAdded: Company!
}

input AddCompanyInput {
  name: String!
  employees: Int!
}

input AddPersonInput {
  name: String!
  age: Int!
}

input CompanyFilterInput {
  and: [CompanyFilterInput!]
  or: [CompanyFilterInput!]
  id: IntOperationFilterInput
  name: StringOperationFilterInput
  employees: IntOperationFilterInput
}

input CompanySortInput {
  id: SortEnumType
  name: SortEnumType
  employees: SortEnumType
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

enum SortEnumType {
  ASC
  DESC
}

directive @lengthLimit(length: Int!) on FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The built-in `Decimal` scalar type."
scalar Decimal

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")