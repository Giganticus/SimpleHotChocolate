query InitialHelloWorld {
  helloWorld(sayHelloTo: "GraphQL")
}

query ManyHellos {
  a: helloWorld(sayHelloTo: "GraphQL")
  b: helloWorld(sayHelloTo: "BananaCakePop")
}

mutation ManyHellos2 {
  a: anotherHelloWorld(sayHelloTo: "GraphQL")
  b: anotherHelloWorld(sayHelloTo: "BananaCakePop")
}

query GetAllPeople {
  people {
    id
    name
    age
  }
}


query GetAllPeopleWithInterests {
  people {
    id
    name
    age
    interests{
      description
    }
  }
}


fragment PersonFragment on Person{
  id
  name  
}

query GetAllPeopleWithFragment {
  people{
  ...PersonFragment
}}


query GetSinglePersonUsingName {
  singlePersonByName(personName: "Person1") {
    id
    name
    age
  }
}

query GetSomePeopleInParallelNotEfficient {
  a: singlePersonByName(personName: "Person1") {
    id
    name
    age
  }

  b: singlePersonByName(personName: "Person2") {
    id
    name
    age
  }

  c: singlePersonByName(personName: "Person3") {
    id
    name
    age
  }
}

query GetSomePeopleInParallelEfficient {
  a: singlePersonByNameUsingDataLoader(personName: "Person1") {
    id
    name
    age
  }

  b: singlePersonByNameUsingDataLoader(personName: "Person2") {
    id
    name
    age
  }

  c: singlePersonByNameUsingDataLoader(personName: "Person3") {
    id
    name
    age
  }
}

query GetManyPeopleByName {
  peopleByName(names: ["Person1", "Person2"]) {
    id
    name
    age
  }
}

mutation AddANewPerson {
  addAPerson(input: { name: "Person1", age: 45 }) {
    errors
    person {
      id
      name
    }
  }
}

query GetFirstCountry { 
  countries(first: 1) {
    edges {
      node {
        id
        name
      }
      cursor
    }
    pageInfo {
      startCursor
      endCursor
      hasNextPage
      hasPreviousPage
    }
  }
}

query GetNextCountry {
  countries(first: 1, after: "MA==") {
    edges {
      node {
        id
        name
      }
      cursor
    }
    pageInfo {
      startCursor
      endCursor
      hasNextPage
      hasPreviousPage
    }
  }
}

query GetAllCountries {
  countries {
    edges {
      node {
        id
        name       
      }
      cursor
    }
    pageInfo {
      startCursor
      endCursor
      hasNextPage
      hasPreviousPage
    }
  }
}

query GetCompaniesContaining2InName {
  getCompanies(where: { name: { contains: "2" } }) {
    nodes {
      name
    }
  }
}

query SortCompaniesByEmployees {
  getCompanies(order: [{ employees: ASC }]) {
    nodes {
      name
      employees
    }
  }
}

mutation AddACompany {
  addCompany(input: { name: "Company1", employees: 100 }) {
    errors
    company {
      name
      id
    }
  }
}